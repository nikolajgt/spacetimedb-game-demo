// THIS FILE IS AUTOMATICALLY GENERATED BY SPACETIMEDB. EDITS TO THIS FILE
// WILL NOT BE SAVED. MODIFY TABLES IN YOUR MODULE SOURCE CODE INSTEAD.

// This was generated using stdb cli version 1.2.0 (commit ).

#![allow(unused, clippy::all)]
use super::character_type::Character;
use spacetimedb_sdk::__codegen::{self as __sdk, __lib, __sats, __ws};

/// Table handle for the table `character_logic`.
///
/// Obtain a handle from the [`CharactersTableAccess::characters`] method on [`super::RemoteTables`],
/// like `ctx.db.character_logic()`.
///
/// Users are encouraged not to explicitly reference this type,
/// but to directly chain method calls,
/// like `ctx.db.character_logic().on_insert(...)`.
pub struct CharactersTableHandle<'ctx> {
    imp: __sdk::TableHandle<Character>,
    ctx: std::marker::PhantomData<&'ctx super::RemoteTables>,
}

#[allow(non_camel_case_types)]
/// Extension trait for access to the table `character_logic`.
///
/// Implemented for [`super::RemoteTables`].
pub trait CharactersTableAccess {
    #[allow(non_snake_case)]
    /// Obtain a [`CharactersTableHandle`], which mediates access to the table `character_logic`.
    fn characters(&self) -> CharactersTableHandle<'_>;
}

impl CharactersTableAccess for super::RemoteTables {
    fn characters(&self) -> CharactersTableHandle<'_> {
        CharactersTableHandle {
            imp: self.imp.get_table::<Character>("character_logic"),
            ctx: std::marker::PhantomData,
        }
    }
}

pub struct CharactersInsertCallbackId(__sdk::CallbackId);
pub struct CharactersDeleteCallbackId(__sdk::CallbackId);

impl<'ctx> __sdk::Table for CharactersTableHandle<'ctx> {
    type Row = Character;
    type EventContext = super::EventContext;

    fn count(&self) -> u64 {
        self.imp.count()
    }
    fn iter(&self) -> impl Iterator<Item = Character> + '_ {
        self.imp.iter()
    }

    type InsertCallbackId = CharactersInsertCallbackId;

    fn on_insert(
        &self,
        callback: impl FnMut(&Self::EventContext, &Self::Row) + Send + 'static,
    ) -> CharactersInsertCallbackId {
        CharactersInsertCallbackId(self.imp.on_insert(Box::new(callback)))
    }

    fn remove_on_insert(&self, callback: CharactersInsertCallbackId) {
        self.imp.remove_on_insert(callback.0)
    }

    type DeleteCallbackId = CharactersDeleteCallbackId;

    fn on_delete(
        &self,
        callback: impl FnMut(&Self::EventContext, &Self::Row) + Send + 'static,
    ) -> CharactersDeleteCallbackId {
        CharactersDeleteCallbackId(self.imp.on_delete(Box::new(callback)))
    }

    fn remove_on_delete(&self, callback: CharactersDeleteCallbackId) {
        self.imp.remove_on_delete(callback.0)
    }
}

#[doc(hidden)]
pub(crate) fn register_table(client_cache: &mut __sdk::ClientCache<super::RemoteModule>) {
    let _table = client_cache.get_or_make_table::<Character>("character_logic");
    _table.add_unique_constraint::<u128>("character_id", |row| &row.character_id);
    _table.add_unique_constraint::<u128>("user_id", |row| &row.user_id);
    _table.add_unique_constraint::<String>("name", |row| &row.name);
}
pub struct CharactersUpdateCallbackId(__sdk::CallbackId);

impl<'ctx> __sdk::TableWithPrimaryKey for CharactersTableHandle<'ctx> {
    type UpdateCallbackId = CharactersUpdateCallbackId;

    fn on_update(
        &self,
        callback: impl FnMut(&Self::EventContext, &Self::Row, &Self::Row) + Send + 'static,
    ) -> CharactersUpdateCallbackId {
        CharactersUpdateCallbackId(self.imp.on_update(Box::new(callback)))
    }

    fn remove_on_update(&self, callback: CharactersUpdateCallbackId) {
        self.imp.remove_on_update(callback.0)
    }
}

#[doc(hidden)]
pub(crate) fn parse_table_update(
    raw_updates: __ws::TableUpdate<__ws::BsatnFormat>,
) -> __sdk::Result<__sdk::TableUpdate<Character>> {
    __sdk::TableUpdate::parse_table_update(raw_updates).map_err(|e| {
        __sdk::InternalError::failed_parse("TableUpdate<Character>", "TableUpdate")
            .with_cause(e)
            .into()
    })
}

/// Access to the `character_id` unique index on the table `character_logic`,
/// which allows point queries on the field of the same name
/// via the [`CharactersCharacterIdUnique::find`] method.
///
/// Users are encouraged not to explicitly reference this type,
/// but to directly chain method calls,
/// like `ctx.db.character_logic().character_id().find(...)`.
pub struct CharactersCharacterIdUnique<'ctx> {
    imp: __sdk::UniqueConstraintHandle<Character, u128>,
    phantom: std::marker::PhantomData<&'ctx super::RemoteTables>,
}

impl<'ctx> CharactersTableHandle<'ctx> {
    /// Get a handle on the `character_id` unique index on the table `character_logic`.
    pub fn character_id(&self) -> CharactersCharacterIdUnique<'ctx> {
        CharactersCharacterIdUnique {
            imp: self.imp.get_unique_constraint::<u128>("character_id"),
            phantom: std::marker::PhantomData,
        }
    }
}

impl<'ctx> CharactersCharacterIdUnique<'ctx> {
    /// Find the subscribed row whose `character_id` column value is equal to `col_val`,
    /// if such a row is present in the client cache.
    pub fn find(&self, col_val: &u128) -> Option<Character> {
        self.imp.find(col_val)
    }
}

/// Access to the `user_id` unique index on the table `character_logic`,
/// which allows point queries on the field of the same name
/// via the [`CharactersUserIdUnique::find`] method.
///
/// Users are encouraged not to explicitly reference this type,
/// but to directly chain method calls,
/// like `ctx.db.character_logic().user_id().find(...)`.
pub struct CharactersUserIdUnique<'ctx> {
    imp: __sdk::UniqueConstraintHandle<Character, u128>,
    phantom: std::marker::PhantomData<&'ctx super::RemoteTables>,
}

impl<'ctx> CharactersTableHandle<'ctx> {
    /// Get a handle on the `user_id` unique index on the table `character_logic`.
    pub fn user_id(&self) -> CharactersUserIdUnique<'ctx> {
        CharactersUserIdUnique {
            imp: self.imp.get_unique_constraint::<u128>("user_id"),
            phantom: std::marker::PhantomData,
        }
    }
}

impl<'ctx> CharactersUserIdUnique<'ctx> {
    /// Find the subscribed row whose `user_id` column value is equal to `col_val`,
    /// if such a row is present in the client cache.
    pub fn find(&self, col_val: &u128) -> Option<Character> {
        self.imp.find(col_val)
    }
}

/// Access to the `name` unique index on the table `character_logic`,
/// which allows point queries on the field of the same name
/// via the [`CharactersNameUnique::find`] method.
///
/// Users are encouraged not to explicitly reference this type,
/// but to directly chain method calls,
/// like `ctx.db.character_logic().name().find(...)`.
pub struct CharactersNameUnique<'ctx> {
    imp: __sdk::UniqueConstraintHandle<Character, String>,
    phantom: std::marker::PhantomData<&'ctx super::RemoteTables>,
}

impl<'ctx> CharactersTableHandle<'ctx> {
    /// Get a handle on the `name` unique index on the table `character_logic`.
    pub fn name(&self) -> CharactersNameUnique<'ctx> {
        CharactersNameUnique {
            imp: self.imp.get_unique_constraint::<String>("name"),
            phantom: std::marker::PhantomData,
        }
    }
}

impl<'ctx> CharactersNameUnique<'ctx> {
    /// Find the subscribed row whose `name` column value is equal to `col_val`,
    /// if such a row is present in the client cache.
    pub fn find(&self, col_val: &String) -> Option<Character> {
        self.imp.find(col_val)
    }
}
